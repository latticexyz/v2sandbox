// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { Ship } from "./../../tables/Ship.sol";
import { Position, PositionData } from "./../../tables/Position.sol";
import { Rotation } from "./../../tables/Rotation.sol";
import { SailPosition } from "./../../tables/SailPosition.sol";
import { OwnedBy } from "./../../tables/OwnedBy.sol";
import { Speed } from "./../../tables/Speed.sol";
import { Length } from "./../../tables/Length.sol";
import { Health } from "./../../tables/Health.sol";
import { MaxHealth } from "./../../tables/MaxHealth.sol";
import { Kills } from "./../../tables/Kills.sol";
import { Booty } from "./../../tables/Booty.sol";
import { LastHit } from "./../../tables/LastHit.sol";

library ShipPrototype {
  function create(
    bytes32 key,
    uint256 _Ship,
    PositionData memory _Position,
    uint32 _Rotation,
    uint256 _OwnedBy,
    uint32 _Speed,
    uint32 _Length,
    uint32 _Health,
    uint32 _MaxHealth,
    uint256 _Booty
  ) internal {
    Ship.set(key, _Ship);
    Position.set(key, _Position);
    Rotation.set(key, _Rotation);
    SailPosition.set(key, 2);
    OwnedBy.set(key, _OwnedBy);
    Speed.set(key, _Speed);
    Length.set(key, _Length);
    Health.set(key, _Health);
    MaxHealth.set(key, _MaxHealth);
    Kills.set(key, 0);
    Booty.set(key, _Booty);
    LastHit.set(key, 0x60D);
  }

  function destroy(bytes32 key) internal {
    Ship.deleteRecord(key);
    Position.deleteRecord(key);
    Rotation.deleteRecord(key);
    SailPosition.deleteRecord(key);
    OwnedBy.deleteRecord(key);
    Speed.deleteRecord(key);
    Length.deleteRecord(key);
    Health.deleteRecord(key);
    MaxHealth.deleteRecord(key);
    Kills.deleteRecord(key);
    Booty.deleteRecord(key);
    LastHit.deleteRecord(key);
  }

  function getTableIds() internal pure returns (uint256[] memory _tableIds) {
    _tableIds = new uint256[](12);
    _tableIds[0] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Ship"))));
    _tableIds[1] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Position"))));
    _tableIds[2] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Rotation"))));
    _tableIds[3] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("SailPosition"))));
    _tableIds[4] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("OwnedBy"))));
    _tableIds[5] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Speed"))));
    _tableIds[6] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Length"))));
    _tableIds[7] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Health"))));
    _tableIds[8] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("MaxHealth"))));
    _tableIds[9] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Kills"))));
    _tableIds[10] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("Booty"))));
    _tableIds[11] = uint256(bytes32(abi.encodePacked(bytes16("mud"), bytes16("LastHit"))));
  }
}
